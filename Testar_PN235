/**************************************************************************/
/*! 
    This example will wait for any ISO14443A card or tag, and
    depending on the size of the UID will attempt to read from it.
   
    If the card has a 4-byte UID it is probably a Mifare
    Classic card, and the following steps are taken:
   
    - Authenticate block 4 (the first block of Sector 1) using
      the default KEYA of 0XFF 0XFF 0XFF 0XFF 0XFF 0XFF
    - If authentication succeeds, we can then read any of the
      4 blocks in that sector (though only block 4 is read here)
   
    If the card has a 7-byte UID it is probably a Mifare
    Ultralight card, and the 4 byte pages can be read directly.
    Page 4 is read by default since this is the first 'general-
    purpose' page on the tags.

*/
/**************************************************************************/



// Bibliotecas ---------------------------------------------------------------------------------------------

// choose to SPI or I2C or HSU
#if 0
  #include <SPI.h>
  #include <PN532_SPI.h>
  #include "PN532.h"

  PN532SPI pn532spi(SPI, 10);
  PN532 nfc(pn532spi);
#elif 0
  #include <PN532_HSU.h>
  #include <PN532.h>
      
  PN532_HSU pn532hsu(Serial1);
  PN532 nfc(pn532hsu);
#else 
  #include <Wire.h>
  #include <PN532_I2C.h>
  #include <PN532.h>

  PN532_I2C pn532i2c(Wire);
  PN532 nfc(pn532i2c);
#endif

// Bibliotecas ---------------------------------------------------------------------------------------------






int FNblockToRead=0;



// Setup - Só roda uma única vez no início do código
// Responsavel por toda configuração da placa
// Recomento não mecher nos comandos que não sejam prints
void setup(void) {

  // Inicia a serial
  Serial.begin(115200);
  Serial.println("Hello!");

  // Liga o reconhecimento dos cartões
  nfc.begin();

  // Checa a versão do NFS
  // Aparentemente esse método é booleano, (chute) retornando true se a versão estiver "correta"
  uint32_t versiondata = nfc.getFirmwareVersion();

  // Se a versão não for a esperada/compatível:
  if (! versiondata) {
    Serial.print("Didn't find PN53x board");
    
    // Acredito que esse while mantem o resto do código "congelado"
    // O programa entra nesse loop infinito propositalmente pra não rodar os loops
    while (1); // halt
  }

  // Se o código chegou a esse ponto, as informações de versão estão corretas
  // A parte abaixo serve apenas para mostrar a versão
  Serial.print("Found chip PN5"); Serial.println((versiondata>>24) & 0xFF, HEX); 
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC); 
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);

  // Configura a placa para ler tags RFID
  nfc.SAMConfig();

  // Final do setup
  Serial.println("Waiting for an ISO14443A Card ...");
}





void loop(void) {
  uint8_t success;

  // Buffer para guardar o UID (No nosso caso, Numero USP)
  // Possui 7 espaços para os 7 digitos do numero usp
  // Ex: 9360760 --> {9, 3, 6, 0, 7, 6, 0}
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID

  // Tipo de cartão, recomendo não mecher com essa parte
  uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)

  // Espera por um cartão
  // Quando ele identifica algum:
    // armazena seu UID (No nosso caso, Numero USP) no array uid[] comentado acima
    // armazena o tipo de cartão na variavel uidLength
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);



  // Se ele fez uma leitura:
  if (success) {
    // Mostre algumas informações basicas do cartão:
    Serial.println("Found an ISO14443A card");
    Serial.print("  UID Length: ");
    Serial.print(uidLength, DEC);
    Serial.println(" bytes");
    Serial.print("  UID Value: ");
    nfc.PrintHex(uid, uidLength);
    Serial.println("");

    // Nota: acredito que aqui acaba a parte mais importante do código
    // Acredito que o NUSP necessário para destrancar a fechadura esta
    // contido no array uid[], poderiamos começar o código nesse ponto

    // O codigo provavelmente teria uma estrutura semelhante a essa:

    /*
     * public static void abrirTranca(){
     *     // Aqui vai toda a parte elétrica para abrir a tranca
     * }
     * 
     * 
     * white_list = [9360760, 9360761, 9360762, 9360763, 9360764];
     * 
     * // Essa parte deve converter o UID[] de um array de hexadecimais para o NUSP
     * NUSP = nfc.PrintHex(uid, uidLength); // Provavelmente errado
     * 
     * sucess = false;
     * for(int i=0; i<white_list.length; i++){
     *     if(NUSP == white_list[i]){
     *         abrirTranca();
     *         sucess = true;
     *     }
     * }
     * 
     * if(sucess){
     *     Serial.println("Bem vindo "+NUSP+"!");
     * }
     * else{
     *     Serial.println("Access Denied");
     * }
     * 
     * // Para o código não tentar destrancar varias vezes a fechadura
     * // Delay de 5 segundos entre leituras
     * delay(5000)
     */




    // Autenticação para cartões de tipo 4 bytes -----------------------------------------------------------------------------------------------------
    if (uidLength == 4)
    {
      // We probably have a Mifare Classic card ... 
      Serial.println("Seems to be a Mifare Classic card (4 byte UID)");
    
      // Now we need to try to authenticate it for read/write access
      // Try with the factory default KeyA: 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
      Serial.println("Trying to authenticate block 4 with default KEYA value");
      uint8_t keya[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
    
    // Start with block 4 (the first block of sector 1) since sector 0
    // contains the manufacturer data and it's probably better just
    // to leave it alone unless you know what you're doing
    // success = nfc.mifareclassic_AuthenticateBlock(uid, uidLength, 4, 0, keya); commented out original code
    // autenticacao feita por bloco - 
      success = nfc.mifareclassic_AuthenticateBlock(uid, uidLength, FNblockToRead, 0, keya);
    
      if (success)
      {
        Serial.println("Sector 1 (Blocks 4..7) has been authenticated");
        uint8_t data[16]={'n','a','o',' ','s','o','b','r','e','s','c','r','e','v','e','u'};  // conteudo do bloco.
    
        // If you want to write something to block 4 to test with, uncomment
    // the following line and this text should be read back in a minute
        // data = { 'a', 'd', 'a', 'f', 'r', 'u', 'i', 't', '.', 'c', 'o', 'm', 0, 0, 0, 0};
        // success = nfc.mifareclassic_WriteDataBlock (4, data);

        // Try to read the contents of block 4
        success = nfc.mifareclassic_ReadDataBlock(1, data);  // da sucesso nos blocos 0..3
    
        if (success)
        {
          // Data seems to have been read ... spit it out
          Serial.println("Reading Block FNblockToRead:");
          for (int i=0;i<16;i++) {
              Serial.print ((char)data[i]);
          }
          Serial.println("");
      
          // Wait a bit before reading the card again
          delay(10000);
        }
        else
        {
          Serial.println("Ooops ... unable to read the requested block.  Try another key?");
        }
      }
      else
      {
        Serial.println("Ooops ... authentication failed: Try another key?");
      }
    }



    // Autenticação para cartões de tipo 7 bytes -----------------------------------------------------------------------------------------------------
    if (uidLength == 7)
    {
      // We probably have a Mifare Ultralight card ...
      Serial.println("Seems to be a Mifare Ultralight tag (7 byte UID)");
    
      // Try to read the first general-purpose user page (#4)
      Serial.println("Reading page 4");
      uint8_t data[32];
      success = nfc.mifareultralight_ReadPage (4, data);
      if (success)
      {
        // Data seems to have been read ... spit it out
        nfc.PrintHexChar(data, 4);
        Serial.println("");
    
        // Wait a bit before reading the card again
        delay(1000);
      }
      else
      {
        Serial.println("Ooops ... unable to read the requested page!?");
      } 
    }


    
  }
}

